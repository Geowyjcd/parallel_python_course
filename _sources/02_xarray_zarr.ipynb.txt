{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "toc": true
   },
   "source": [
    "<h1>Table of Contents<span class=\"tocSkip\"></span></h1>\n",
    "<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#02:-xarray,-netcdf-and-zarr\" data-toc-modified-id=\"02:-xarray,-netcdf-and-zarr-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;</span>02: xarray, netcdf and zarr</a></span><ul class=\"toc-item\"><li><span><a href=\"#The-current-defacto-standard-in-atmos/ocean-science\" data-toc-modified-id=\"The-current-defacto-standard-in-atmos/ocean-science-1.1\"><span class=\"toc-item-num\">1.1&nbsp;&nbsp;</span>The current defacto standard in atmos/ocean science</a></span></li><li><span><a href=\"#Some-challenges-with-netcdf\" data-toc-modified-id=\"Some-challenges-with-netcdf-1.2\"><span class=\"toc-item-num\">1.2&nbsp;&nbsp;</span>Some challenges with netcdf</a></span></li><li><span><a href=\"#create-an-xarray\" data-toc-modified-id=\"create-an-xarray-1.3\"><span class=\"toc-item-num\">1.3&nbsp;&nbsp;</span>create an xarray</a></span></li><li><span><a href=\"#Download-toy-model-data\" data-toc-modified-id=\"Download-toy-model-data-1.4\"><span class=\"toc-item-num\">1.4&nbsp;&nbsp;</span>Download toy model data</a></span></li><li><span><a href=\"#Sort-in-numeric-order\" data-toc-modified-id=\"Sort-in-numeric-order-1.5\"><span class=\"toc-item-num\">1.5&nbsp;&nbsp;</span>Sort in numeric order</a></span></li><li><span><a href=\"#Make-an-xarray\" data-toc-modified-id=\"Make-an-xarray-1.6\"><span class=\"toc-item-num\">1.6&nbsp;&nbsp;</span>Make an xarray</a></span></li><li><span><a href=\"#Dump-to-a-zarr-file\" data-toc-modified-id=\"Dump-to-a-zarr-file-1.7\"><span class=\"toc-item-num\">1.7&nbsp;&nbsp;</span>Dump to a zarr file</a></span></li></ul></li></ul></div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 02: xarray, netcdf and zarr\n",
    "\n",
    "Motivation:  how you store your data can an enormous effect on performance.\n",
    "\n",
    "Four issues:\n",
    "\n",
    "1) Compression vs. cpu time to uncompress/compress\n",
    "\n",
    "2) Multithreaded read/writes\n",
    "\n",
    "3) Performance for cloud storage (Amazon, Google Compute, Azure)\n",
    "\n",
    "4) Throttling data reads to fit in available memory and avoid swapping (\"chunking\")\n",
    "\n",
    "## The current defacto standard in atmos/ocean science\n",
    "\n",
    "\n",
    "* [netcdf/hdf5](ttps://www.unidata.ucar.edu/software/netcdf/docs/index.html)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Some challenges with netcdf\n",
    "\n",
    "* [The Pangeo project](http://pangeo-data.org/)\n",
    "\n",
    "* [Cloud challenges](https://medium.com/pangeo)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## create an xarray"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import glob\n",
    "import numpy as np\n",
    "import pdb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#!conda install -y xarray"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "******************************\n",
      "context imported. Front of path:\n",
      "/Users/phil/repos/parallel_python_course/notebooks\n",
      "\n",
      "******************************\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import context\n",
    "from westgrid.data_read import download"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Download toy model data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mar12014_1_15600.nc\n",
      "trying http://clouds.eos.ubc.ca/~phil/docs/atsc500/small_les/mar12014_1_15600.nc\n",
      "writing to: mar12014_1_15600.nc\n",
      "\n",
      "mar12014_1_15600.nc already exists\n",
      "and is 1455454 bytes\n",
      "will not overwrite\n",
      "\n",
      "mar12014_2_15600.nc\n",
      "trying http://clouds.eos.ubc.ca/~phil/docs/atsc500/small_les/mar12014_2_15600.nc\n",
      "writing to: mar12014_2_15600.nc\n",
      "\n",
      "mar12014_2_15600.nc already exists\n",
      "and is 1455454 bytes\n",
      "will not overwrite\n",
      "\n",
      "mar12014_3_15600.nc\n",
      "trying http://clouds.eos.ubc.ca/~phil/docs/atsc500/small_les/mar12014_3_15600.nc\n",
      "writing to: mar12014_3_15600.nc\n",
      "\n",
      "mar12014_3_15600.nc already exists\n",
      "and is 1455454 bytes\n",
      "will not overwrite\n",
      "\n",
      "mar12014_4_15600.nc\n",
      "trying http://clouds.eos.ubc.ca/~phil/docs/atsc500/small_les/mar12014_4_15600.nc\n",
      "writing to: mar12014_4_15600.nc\n",
      "\n",
      "mar12014_4_15600.nc already exists\n",
      "and is 1455454 bytes\n",
      "will not overwrite\n",
      "\n",
      "mar12014_5_15600.nc\n",
      "trying http://clouds.eos.ubc.ca/~phil/docs/atsc500/small_les/mar12014_5_15600.nc\n",
      "writing to: mar12014_5_15600.nc\n",
      "\n",
      "mar12014_5_15600.nc already exists\n",
      "and is 1455454 bytes\n",
      "will not overwrite\n",
      "\n",
      "mar12014_6_15600.nc\n",
      "trying http://clouds.eos.ubc.ca/~phil/docs/atsc500/small_les/mar12014_6_15600.nc\n",
      "writing to: mar12014_6_15600.nc\n",
      "\n",
      "mar12014_6_15600.nc already exists\n",
      "and is 1455454 bytes\n",
      "will not overwrite\n",
      "\n",
      "mar12014_7_15600.nc\n",
      "trying http://clouds.eos.ubc.ca/~phil/docs/atsc500/small_les/mar12014_7_15600.nc\n",
      "writing to: mar12014_7_15600.nc\n",
      "\n",
      "mar12014_7_15600.nc already exists\n",
      "and is 1455454 bytes\n",
      "will not overwrite\n",
      "\n",
      "mar12014_8_15600.nc\n",
      "trying http://clouds.eos.ubc.ca/~phil/docs/atsc500/small_les/mar12014_8_15600.nc\n",
      "writing to: mar12014_8_15600.nc\n",
      "\n",
      "mar12014_8_15600.nc already exists\n",
      "and is 1455454 bytes\n",
      "will not overwrite\n",
      "\n",
      "mar12014_9_15600.nc\n",
      "trying http://clouds.eos.ubc.ca/~phil/docs/atsc500/small_les/mar12014_9_15600.nc\n",
      "writing to: mar12014_9_15600.nc\n",
      "\n",
      "mar12014_9_15600.nc already exists\n",
      "and is 1455454 bytes\n",
      "will not overwrite\n",
      "\n",
      "mar12014_10_15600.nc\n",
      "trying http://clouds.eos.ubc.ca/~phil/docs/atsc500/small_les/mar12014_10_15600.nc\n",
      "writing to: mar12014_10_15600.nc\n",
      "\n",
      "mar12014_10_15600.nc already exists\n",
      "and is 1455454 bytes\n",
      "will not overwrite\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#get 10 files, each is the same timestep for a member of a\n",
    "#10 member ensemble\n",
    "\n",
    "import numpy as np\n",
    "root='http://clouds.eos.ubc.ca/~phil/docs/atsc500/small_les'\n",
    "for i in range(10):\n",
    "    the_name=f'mar12014_{(i+1):d}_15600.nc'\n",
    "    print(the_name)\n",
    "    url='{}/{}'.format(root,the_name)\n",
    "    download(the_name,root=root)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[PosixPath('/Users/phil/repos/parallel_python_course/notebooks/mar12014_2_15600.nc'),\n",
       " PosixPath('/Users/phil/repos/parallel_python_course/notebooks/mar12014_3_15600.nc'),\n",
       " PosixPath('/Users/phil/repos/parallel_python_course/notebooks/mar12014_10_15600.nc'),\n",
       " PosixPath('/Users/phil/repos/parallel_python_course/notebooks/mar12014_8_15600.nc'),\n",
       " PosixPath('/Users/phil/repos/parallel_python_course/notebooks/mar12014_9_15600.nc'),\n",
       " PosixPath('/Users/phil/repos/parallel_python_course/notebooks/mar12014_5_15600.nc'),\n",
       " PosixPath('/Users/phil/repos/parallel_python_course/notebooks/mar12014_4_15600.nc'),\n",
       " PosixPath('/Users/phil/repos/parallel_python_course/notebooks/mar12014_1_15600.nc'),\n",
       " PosixPath('/Users/phil/repos/parallel_python_course/notebooks/mar12014_6_15600.nc'),\n",
       " PosixPath('/Users/phil/repos/parallel_python_course/notebooks/mar12014_7_15600.nc')]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#get 10 files, each is the same timestep for a member of a\n",
    "#10 member ensemble\n",
    "import numpy as np\n",
    "root=Path().resolve()\n",
    "the_files=root.glob('mar12*nc')\n",
    "the_files=list(the_files)\n",
    "the_files"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Sort in numeric order"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "import glob\n",
    "import xarray\n",
    "from matplotlib import pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "def sort_name(pathname):\n",
    "    \"\"\"\n",
    "      sort the filenames so '10' sorts\n",
    "      last by converting to integers\n",
    "    \"\"\"\n",
    "    str_name=str(pathname.name)\n",
    "    front, number, back = str_name.split('_')\n",
    "    return int(number)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Make an xarray"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now use xarray to stitch together the 10 ensemble members along a new \"virtual dimenstion\".\n",
    "The variable \"ds\"  is an xray dataset, which controls the reads/writes from the\n",
    "10 netcdf files\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<xarray.Dataset>\n",
      "Dimensions:  (ens: 10, time: 1, x: 50, y: 40, z: 30)\n",
      "Coordinates:\n",
      "  * x        (x) float32 0.0 25.0 50.0 75.0 100.0 125.0 150.0 175.0 200.0 ...\n",
      "  * y        (y) float32 0.0 25.0 50.0 75.0 100.0 125.0 150.0 175.0 200.0 ...\n",
      "  * z        (z) float32 25.0 50.0 75.0 100.0 125.0 150.0 175.0 200.0 205.0 ...\n",
      "  * time     (time) float32 169.18056\n",
      "Dimensions without coordinates: ens\n",
      "Data variables:\n",
      "    p        (ens, z) float32 dask.array<shape=(10, 30), chunksize=(1, 30)>\n",
      "    U        (ens, z, y, x) float32 dask.array<shape=(10, 30, 40, 50), chunksize=(1, 30, 40, 50)>\n",
      "    V        (ens, z, y, x) float32 dask.array<shape=(10, 30, 40, 50), chunksize=(1, 30, 40, 50)>\n",
      "    W        (ens, z, y, x) float32 dask.array<shape=(10, 30, 40, 50), chunksize=(1, 30, 40, 50)>\n",
      "    PP       (ens, z, y, x) float32 dask.array<shape=(10, 30, 40, 50), chunksize=(1, 30, 40, 50)>\n",
      "    TABS     (ens, z, y, x) float32 dask.array<shape=(10, 30, 40, 50), chunksize=(1, 30, 40, 50)>\n",
      "    QV       (ens, z, y, x) float32 dask.array<shape=(10, 30, 40, 50), chunksize=(1, 30, 40, 50)>\n"
     ]
    }
   ],
   "source": [
    "the_files.sort(key=sort_name)\n",
    "\n",
    "#\n",
    "#  put the 10 ensembles together along a new \"ens\" dimension\n",
    "#  using an xray multi-file dataset\n",
    "#\n",
    "ds = xarray.open_mfdataset(the_files, engine='netcdf4', concat_dim='ens')\n",
    "# dump the structure\n",
    "print(ds)\n",
    "#\n",
    "#  3-d ensemble average for temp\n",
    "#\n",
    "x = ds['x']\n",
    "y = ds['y']\n",
    "z = ds['z']\n",
    "temp = ds['TABS']\n",
    "mean_temp = temp[:,  :, :, :].mean(dim='ens')\n",
    "#\n",
    "# same for velocity\n",
    "#\n",
    "wvel = ds['W']\n",
    "mean_w = wvel[:,  :, :, :].mean(dim='ens')\n",
    "#\n",
    "# now look at the perturbation fields for one ensemble member\n",
    "#\n",
    "wvelprime = wvel[0,  :, :, :] - mean_w\n",
    "Tprime = temp[0,  :, :, :] - mean_temp\n",
    "flux_prime = wvelprime * Tprime\n",
    "flux_profile = flux_prime.mean(dim='x').mean(dim='y')\n",
    "keep_dict = dict(flux_prof=flux_profile, flux_prime=flux_prime.values,\n",
    "                 wvelprime=wvelprime.values, Tprime=Tprime.values, x=x, y=y, z=z)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Dump to a zarr file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<xarray.backends.zarr.ZarrStore at 0x312a84f28>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ds.to_zarr('zarr_dir','w')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig1, ax1 = plt.subplots(1, 1)\n",
    "ax1.plot('flux_prof', 'z', data = keep_dict)\n",
    "ax1.set(title='Ens 0: vertically averaged kinematic heat flux',\n",
    "        ylabel='z (m)', xlabel='flux (K m/s)')\n",
    "\n",
    "fig2, ax2 = plt.subplots(1, 1)\n",
    "z200 = np.searchsorted(keep_dict['z'], 200)\n",
    "flux_200 = keep_dict['flux_prime'][z200,:,:].flat\n",
    "ax2.hist(flux_200)\n",
    "ax2.set(title='histogram of kinematic heat flux (K m/s) at z=200 m')\n",
    "\n",
    "fig3, ax3 = plt.subplots(1, 1)\n",
    "wvel200=keep_dict['wvelprime'][z200,:,:].flat\n",
    "ax3.hist(wvel200)\n",
    "ax3.set(title=\"histogram of wvel' at 200 m\")\n",
    "\n",
    "fig4, ax4 = plt.subplots(1, 1)\n",
    "Tprime200=keep_dict['Tprime'][z200, :, :].flat\n",
    "ax4.hist(Tprime200)\n",
    "ax4.set(title=\"histogram ot T' at z=200 m\");\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  },
  "toc": {
   "nav_menu": {},
   "number_sections": true,
   "sideBar": false,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": true,
   "toc_position": {},
   "toc_section_display": "block",
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
